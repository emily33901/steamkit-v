// Generated by vproto - Do not modify
module proto

import emily33901.vproto

pub struct CFriendMessages_GetRecentMessages_Request {
mut:
	unknown_fields           []vproto.UnknownField
pub mut:
	steamid1                 u64
	steamid2                 u64
	count                    u32
	most_recent_conversation bool
	rtime32_start_time       u32
	bbcode_format            bool
	start_ordinal            u32
	time_last                u32
	ordinal_last             u32
}

pub fn (o &CFriendMessages_GetRecentMessages_Request) pack() []byte {
	mut res := []byte{}
	if o.steamid1 != u64(0) {
		res << vproto.pack_64bit_field(o.steamid1, 1)
	}
	if o.steamid2 != u64(0) {
		res << vproto.pack_64bit_field(o.steamid2, 2)
	}
	if o.count != u32(0) {
		res << vproto.pack_uint32_field(o.count, 3)
	}
	if o.most_recent_conversation != false {
		res << vproto.pack_bool_field(o.most_recent_conversation, 4)
	}
	if o.rtime32_start_time != u32(0) {
		res << vproto.pack_32bit_field(o.rtime32_start_time, 5)
	}
	if o.bbcode_format != false {
		res << vproto.pack_bool_field(o.bbcode_format, 6)
	}
	if o.start_ordinal != u32(0) {
		res << vproto.pack_uint32_field(o.start_ordinal, 7)
	}
	if o.time_last != u32(0) {
		res << vproto.pack_uint32_field(o.time_last, 8)
	}
	if o.ordinal_last != u32(0) {
		res << vproto.pack_uint32_field(o.ordinal_last, 9)
	}
	return res
}

pub fn cfriendmessages_getrecentmessages_request_unpack(buf []byte) ?CFriendMessages_GetRecentMessages_Request {
	mut res := zzz_vproto_internal_new_cfriendmessages_getrecentmessages_request()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.steamid1 = vproto.unpack_64bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.steamid2 = vproto.unpack_64bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			3 {
				i, res.count = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			4 {
				i, res.most_recent_conversation = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			5 {
				i, res.rtime32_start_time = vproto.unpack_32bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			6 {
				i, res.bbcode_format = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			7 {
				i, res.start_ordinal = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			8 {
				i, res.time_last = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			9 {
				i, res.ordinal_last = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_GetRecentMessages_Request) eq(b CFriendMessages_GetRecentMessages_Request) bool {
	return true && a.steamid1 == b.steamid1 && a.steamid2 == b.steamid2 && a.count == b.count &&
		a.most_recent_conversation == b.most_recent_conversation && a.rtime32_start_time == b.rtime32_start_time &&
		a.bbcode_format == b.bbcode_format && a.start_ordinal == b.start_ordinal && a.time_last == b.time_last &&
		a.ordinal_last == b.ordinal_last
}

[inline]
pub fn (a CFriendMessages_GetRecentMessages_Request) ne(b CFriendMessages_GetRecentMessages_Request) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_GetRecentMessages_Request) eq(b []CFriendMessages_GetRecentMessages_Request) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_GetRecentMessages_Request) ne(b []CFriendMessages_GetRecentMessages_Request) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_getrecentmessages_request() CFriendMessages_GetRecentMessages_Request {
	return CFriendMessages_GetRecentMessages_Request{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_getrecentmessages_request(o CFriendMessages_GetRecentMessages_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_getrecentmessages_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_GetRecentMessages_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_getrecentmessages_request_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_GetRecentMessages_Response_FriendMessage {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	accountid      u32
	timestamp      u32
	message        string
	ordinal        u32
}

pub fn (o &CFriendMessages_GetRecentMessages_Response_FriendMessage) pack() []byte {
	mut res := []byte{}
	if o.accountid != u32(0) {
		res << vproto.pack_uint32_field(o.accountid, 1)
	}
	if o.timestamp != u32(0) {
		res << vproto.pack_uint32_field(o.timestamp, 2)
	}
	if o.message != '' {
		res << vproto.pack_string_field(o.message, 3)
	}
	if o.ordinal != u32(0) {
		res << vproto.pack_uint32_field(o.ordinal, 4)
	}
	return res
}

pub fn cfriendmessages_getrecentmessages_response_friendmessage_unpack(buf []byte) ?CFriendMessages_GetRecentMessages_Response_FriendMessage {
	mut res := zzz_vproto_internal_new_cfriendmessages_getrecentmessages_response_friendmessage()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.accountid = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.timestamp = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			3 {
				i, res.message = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			4 {
				i, res.ordinal = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_GetRecentMessages_Response_FriendMessage) eq(b CFriendMessages_GetRecentMessages_Response_FriendMessage) bool {
	return true && a.accountid == b.accountid && a.timestamp == b.timestamp && a.message == b.message &&
		a.ordinal == b.ordinal
}

[inline]
pub fn (a CFriendMessages_GetRecentMessages_Response_FriendMessage) ne(b CFriendMessages_GetRecentMessages_Response_FriendMessage) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_GetRecentMessages_Response_FriendMessage) eq(b []CFriendMessages_GetRecentMessages_Response_FriendMessage) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_GetRecentMessages_Response_FriendMessage) ne(b []CFriendMessages_GetRecentMessages_Response_FriendMessage) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_getrecentmessages_response_friendmessage() CFriendMessages_GetRecentMessages_Response_FriendMessage {
	return CFriendMessages_GetRecentMessages_Response_FriendMessage{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_getrecentmessages_response_friendmessage(o CFriendMessages_GetRecentMessages_Response_FriendMessage, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_getrecentmessages_response_friendmessage(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_GetRecentMessages_Response_FriendMessage) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_getrecentmessages_response_friendmessage_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_GetRecentMessages_Response {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	messages       []CFriendMessages_GetRecentMessages_Response_FriendMessage
	more_available bool
}

pub fn (o &CFriendMessages_GetRecentMessages_Response) pack() []byte {
	mut res := []byte{}
	// [packed=false]
	for _, x in o.messages {
		res <<
			zzz_vproto_internal_pack_cfriendmessages_getrecentmessages_response_friendmessage(x, 1)
	}
	if o.more_available != false {
		res << vproto.pack_bool_field(o.more_available, 4)
	}
	return res
}

pub fn cfriendmessages_getrecentmessages_response_unpack(buf []byte) ?CFriendMessages_GetRecentMessages_Response {
	mut res := zzz_vproto_internal_new_cfriendmessages_getrecentmessages_response()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				// [packed=false]
				ii, v := zzz_vproto_internal_unpack_cfriendmessages_getrecentmessages_response_friendmessage(cur_buf,
					tag_wiretype.wire_type) ?
				res.messages << v
				i = ii
			}
			4 {
				i, res.more_available = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_GetRecentMessages_Response) eq(b CFriendMessages_GetRecentMessages_Response) bool {
	return true && a.messages.eq(b.messages) && a.more_available == b.more_available
}

[inline]
pub fn (a CFriendMessages_GetRecentMessages_Response) ne(b CFriendMessages_GetRecentMessages_Response) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_GetRecentMessages_Response) eq(b []CFriendMessages_GetRecentMessages_Response) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_GetRecentMessages_Response) ne(b []CFriendMessages_GetRecentMessages_Response) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_getrecentmessages_response() CFriendMessages_GetRecentMessages_Response {
	return CFriendMessages_GetRecentMessages_Response{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_getrecentmessages_response(o CFriendMessages_GetRecentMessages_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_getrecentmessages_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_GetRecentMessages_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_getrecentmessages_response_unpack(v) ?
	return i, unpacked
}

pub struct CFriendsMessages_GetActiveMessageSessions_Request {
mut:
	unknown_fields              []vproto.UnknownField
pub mut:
	lastmessage_since           u32
	only_sessions_with_messages bool
}

pub fn (o &CFriendsMessages_GetActiveMessageSessions_Request) pack() []byte {
	mut res := []byte{}
	if o.lastmessage_since != u32(0) {
		res << vproto.pack_uint32_field(o.lastmessage_since, 1)
	}
	if o.only_sessions_with_messages != false {
		res << vproto.pack_bool_field(o.only_sessions_with_messages, 2)
	}
	return res
}

pub fn cfriendsmessages_getactivemessagesessions_request_unpack(buf []byte) ?CFriendsMessages_GetActiveMessageSessions_Request {
	mut res := zzz_vproto_internal_new_cfriendsmessages_getactivemessagesessions_request()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.lastmessage_since = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.only_sessions_with_messages = vproto.unpack_bool_field(cur_buf,
					tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendsMessages_GetActiveMessageSessions_Request) eq(b CFriendsMessages_GetActiveMessageSessions_Request) bool {
	return true && a.lastmessage_since == b.lastmessage_since && a.only_sessions_with_messages ==
		b.only_sessions_with_messages
}

[inline]
pub fn (a CFriendsMessages_GetActiveMessageSessions_Request) ne(b CFriendsMessages_GetActiveMessageSessions_Request) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendsMessages_GetActiveMessageSessions_Request) eq(b []CFriendsMessages_GetActiveMessageSessions_Request) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendsMessages_GetActiveMessageSessions_Request) ne(b []CFriendsMessages_GetActiveMessageSessions_Request) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendsmessages_getactivemessagesessions_request() CFriendsMessages_GetActiveMessageSessions_Request {
	return CFriendsMessages_GetActiveMessageSessions_Request{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendsmessages_getactivemessagesessions_request(o CFriendsMessages_GetActiveMessageSessions_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendsmessages_getactivemessagesessions_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendsMessages_GetActiveMessageSessions_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendsmessages_getactivemessagesessions_request_unpack(v) ?
	return i, unpacked
}

pub struct CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
mut:
	unknown_fields       []vproto.UnknownField
pub mut:
	accountid_friend     u32
	last_message         u32
	last_view            u32
	unread_message_count u32
}

pub fn (o &CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) pack() []byte {
	mut res := []byte{}
	if o.accountid_friend != u32(0) {
		res << vproto.pack_uint32_field(o.accountid_friend, 1)
	}
	if o.last_message != u32(0) {
		res << vproto.pack_uint32_field(o.last_message, 2)
	}
	if o.last_view != u32(0) {
		res << vproto.pack_uint32_field(o.last_view, 3)
	}
	if o.unread_message_count != u32(0) {
		res << vproto.pack_uint32_field(o.unread_message_count, 4)
	}
	return res
}

pub fn cfriendsmessages_getactivemessagesessions_response_friendmessagesession_unpack(buf []byte) ?CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
	mut res := zzz_vproto_internal_new_cfriendsmessages_getactivemessagesessions_response_friendmessagesession()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.accountid_friend = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.last_message = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			3 {
				i, res.last_view = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			4 {
				i, res.unread_message_count = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) eq(b CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) bool {
	return true && a.accountid_friend == b.accountid_friend && a.last_message == b.last_message &&
		a.last_view == b.last_view && a.unread_message_count == b.unread_message_count
}

[inline]
pub fn (a CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ne(b CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) eq(b []CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ne(b []CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendsmessages_getactivemessagesessions_response_friendmessagesession() CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
	return CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendsmessages_getactivemessagesessions_response_friendmessagesession(o CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendsmessages_getactivemessagesessions_response_friendmessagesession(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendsmessages_getactivemessagesessions_response_friendmessagesession_unpack(v) ?
	return i, unpacked
}

pub struct CFriendsMessages_GetActiveMessageSessions_Response {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	message_sessions []CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession
	timestamp        u32
}

pub fn (o &CFriendsMessages_GetActiveMessageSessions_Response) pack() []byte {
	mut res := []byte{}
	// [packed=false]
	for _, x in o.message_sessions {
		res <<
			zzz_vproto_internal_pack_cfriendsmessages_getactivemessagesessions_response_friendmessagesession(x, 1)
	}
	if o.timestamp != u32(0) {
		res << vproto.pack_uint32_field(o.timestamp, 2)
	}
	return res
}

pub fn cfriendsmessages_getactivemessagesessions_response_unpack(buf []byte) ?CFriendsMessages_GetActiveMessageSessions_Response {
	mut res := zzz_vproto_internal_new_cfriendsmessages_getactivemessagesessions_response()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				// [packed=false]
				ii, v := zzz_vproto_internal_unpack_cfriendsmessages_getactivemessagesessions_response_friendmessagesession(cur_buf,
					tag_wiretype.wire_type) ?
				res.message_sessions << v
				i = ii
			}
			2 {
				i, res.timestamp = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendsMessages_GetActiveMessageSessions_Response) eq(b CFriendsMessages_GetActiveMessageSessions_Response) bool {
	return true && a.message_sessions.eq(b.message_sessions) && a.timestamp == b.timestamp
}

[inline]
pub fn (a CFriendsMessages_GetActiveMessageSessions_Response) ne(b CFriendsMessages_GetActiveMessageSessions_Response) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendsMessages_GetActiveMessageSessions_Response) eq(b []CFriendsMessages_GetActiveMessageSessions_Response) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendsMessages_GetActiveMessageSessions_Response) ne(b []CFriendsMessages_GetActiveMessageSessions_Response) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendsmessages_getactivemessagesessions_response() CFriendsMessages_GetActiveMessageSessions_Response {
	return CFriendsMessages_GetActiveMessageSessions_Response{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendsmessages_getactivemessagesessions_response(o CFriendsMessages_GetActiveMessageSessions_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendsmessages_getactivemessagesessions_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendsMessages_GetActiveMessageSessions_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendsmessages_getactivemessagesessions_response_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_SendMessage_Request {
mut:
	unknown_fields    []vproto.UnknownField
pub mut:
	steamid           u64
	chat_entry_type   int
	message           string
	contains_bbcode   bool
	echo_to_sender    bool
	low_priority      bool
	client_message_id string
}

pub fn (o &CFriendMessages_SendMessage_Request) pack() []byte {
	mut res := []byte{}
	if o.steamid != u64(0) {
		res << vproto.pack_64bit_field(o.steamid, 1)
	}
	if o.chat_entry_type != int(0) {
		res << vproto.pack_int32_field(o.chat_entry_type, 2)
	}
	if o.message != '' {
		res << vproto.pack_string_field(o.message, 3)
	}
	if o.contains_bbcode != false {
		res << vproto.pack_bool_field(o.contains_bbcode, 4)
	}
	if o.echo_to_sender != false {
		res << vproto.pack_bool_field(o.echo_to_sender, 5)
	}
	if o.low_priority != false {
		res << vproto.pack_bool_field(o.low_priority, 6)
	}
	if o.client_message_id != '' {
		res << vproto.pack_string_field(o.client_message_id, 8)
	}
	return res
}

pub fn cfriendmessages_sendmessage_request_unpack(buf []byte) ?CFriendMessages_SendMessage_Request {
	mut res := zzz_vproto_internal_new_cfriendmessages_sendmessage_request()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.steamid = vproto.unpack_64bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.chat_entry_type = vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			3 {
				i, res.message = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			4 {
				i, res.contains_bbcode = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			5 {
				i, res.echo_to_sender = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			6 {
				i, res.low_priority = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			8 {
				i, res.client_message_id = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_SendMessage_Request) eq(b CFriendMessages_SendMessage_Request) bool {
	return true && a.steamid == b.steamid && a.chat_entry_type == b.chat_entry_type &&
		a.message == b.message && a.contains_bbcode == b.contains_bbcode && a.echo_to_sender == b.echo_to_sender &&
		a.low_priority == b.low_priority && a.client_message_id == b.client_message_id
}

[inline]
pub fn (a CFriendMessages_SendMessage_Request) ne(b CFriendMessages_SendMessage_Request) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_SendMessage_Request) eq(b []CFriendMessages_SendMessage_Request) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_SendMessage_Request) ne(b []CFriendMessages_SendMessage_Request) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_sendmessage_request() CFriendMessages_SendMessage_Request {
	return CFriendMessages_SendMessage_Request{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_sendmessage_request(o CFriendMessages_SendMessage_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_sendmessage_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_SendMessage_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_sendmessage_request_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_SendMessage_Response {
mut:
	unknown_fields          []vproto.UnknownField
pub mut:
	modified_message        string
	server_timestamp        u32
	ordinal                 u32
	message_without_bb_code string
}

pub fn (o &CFriendMessages_SendMessage_Response) pack() []byte {
	mut res := []byte{}
	if o.modified_message != '' {
		res << vproto.pack_string_field(o.modified_message, 1)
	}
	if o.server_timestamp != u32(0) {
		res << vproto.pack_uint32_field(o.server_timestamp, 2)
	}
	if o.ordinal != u32(0) {
		res << vproto.pack_uint32_field(o.ordinal, 3)
	}
	if o.message_without_bb_code != '' {
		res << vproto.pack_string_field(o.message_without_bb_code, 4)
	}
	return res
}

pub fn cfriendmessages_sendmessage_response_unpack(buf []byte) ?CFriendMessages_SendMessage_Response {
	mut res := zzz_vproto_internal_new_cfriendmessages_sendmessage_response()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.modified_message = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.server_timestamp = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			3 {
				i, res.ordinal = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			4 {
				i, res.message_without_bb_code = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_SendMessage_Response) eq(b CFriendMessages_SendMessage_Response) bool {
	return true && a.modified_message == b.modified_message && a.server_timestamp == b.server_timestamp &&
		a.ordinal == b.ordinal && a.message_without_bb_code == b.message_without_bb_code
}

[inline]
pub fn (a CFriendMessages_SendMessage_Response) ne(b CFriendMessages_SendMessage_Response) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_SendMessage_Response) eq(b []CFriendMessages_SendMessage_Response) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_SendMessage_Response) ne(b []CFriendMessages_SendMessage_Response) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_sendmessage_response() CFriendMessages_SendMessage_Response {
	return CFriendMessages_SendMessage_Response{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_sendmessage_response(o CFriendMessages_SendMessage_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_sendmessage_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_SendMessage_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_sendmessage_response_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_AckMessage_Notification {
mut:
	unknown_fields  []vproto.UnknownField
pub mut:
	steamid_partner u64
	timestamp       u32
}

pub fn (o &CFriendMessages_AckMessage_Notification) pack() []byte {
	mut res := []byte{}
	if o.steamid_partner != u64(0) {
		res << vproto.pack_64bit_field(o.steamid_partner, 1)
	}
	if o.timestamp != u32(0) {
		res << vproto.pack_uint32_field(o.timestamp, 2)
	}
	return res
}

pub fn cfriendmessages_ackmessage_notification_unpack(buf []byte) ?CFriendMessages_AckMessage_Notification {
	mut res := zzz_vproto_internal_new_cfriendmessages_ackmessage_notification()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.steamid_partner = vproto.unpack_64bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.timestamp = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_AckMessage_Notification) eq(b CFriendMessages_AckMessage_Notification) bool {
	return true && a.steamid_partner == b.steamid_partner && a.timestamp == b.timestamp
}

[inline]
pub fn (a CFriendMessages_AckMessage_Notification) ne(b CFriendMessages_AckMessage_Notification) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_AckMessage_Notification) eq(b []CFriendMessages_AckMessage_Notification) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_AckMessage_Notification) ne(b []CFriendMessages_AckMessage_Notification) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_ackmessage_notification() CFriendMessages_AckMessage_Notification {
	return CFriendMessages_AckMessage_Notification{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_ackmessage_notification(o CFriendMessages_AckMessage_Notification, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_ackmessage_notification(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_AckMessage_Notification) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_ackmessage_notification_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_IsInFriendsUIBeta_Request {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	steamid        u64
}

pub fn (o &CFriendMessages_IsInFriendsUIBeta_Request) pack() []byte {
	mut res := []byte{}
	if o.steamid != u64(0) {
		res << vproto.pack_64bit_field(o.steamid, 1)
	}
	return res
}

pub fn cfriendmessages_isinfriendsuibeta_request_unpack(buf []byte) ?CFriendMessages_IsInFriendsUIBeta_Request {
	mut res := zzz_vproto_internal_new_cfriendmessages_isinfriendsuibeta_request()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.steamid = vproto.unpack_64bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_IsInFriendsUIBeta_Request) eq(b CFriendMessages_IsInFriendsUIBeta_Request) bool {
	return true && a.steamid == b.steamid
}

[inline]
pub fn (a CFriendMessages_IsInFriendsUIBeta_Request) ne(b CFriendMessages_IsInFriendsUIBeta_Request) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_IsInFriendsUIBeta_Request) eq(b []CFriendMessages_IsInFriendsUIBeta_Request) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_IsInFriendsUIBeta_Request) ne(b []CFriendMessages_IsInFriendsUIBeta_Request) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_isinfriendsuibeta_request() CFriendMessages_IsInFriendsUIBeta_Request {
	return CFriendMessages_IsInFriendsUIBeta_Request{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_isinfriendsuibeta_request(o CFriendMessages_IsInFriendsUIBeta_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_isinfriendsuibeta_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_IsInFriendsUIBeta_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_isinfriendsuibeta_request_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_IsInFriendsUIBeta_Response {
mut:
	unknown_fields      []vproto.UnknownField
pub mut:
	online_in_friendsui bool
	has_used_friendsui  bool
}

pub fn (o &CFriendMessages_IsInFriendsUIBeta_Response) pack() []byte {
	mut res := []byte{}
	if o.online_in_friendsui != false {
		res << vproto.pack_bool_field(o.online_in_friendsui, 1)
	}
	if o.has_used_friendsui != false {
		res << vproto.pack_bool_field(o.has_used_friendsui, 2)
	}
	return res
}

pub fn cfriendmessages_isinfriendsuibeta_response_unpack(buf []byte) ?CFriendMessages_IsInFriendsUIBeta_Response {
	mut res := zzz_vproto_internal_new_cfriendmessages_isinfriendsuibeta_response()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.online_in_friendsui = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.has_used_friendsui = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_IsInFriendsUIBeta_Response) eq(b CFriendMessages_IsInFriendsUIBeta_Response) bool {
	return true && a.online_in_friendsui == b.online_in_friendsui && a.has_used_friendsui == b.has_used_friendsui
}

[inline]
pub fn (a CFriendMessages_IsInFriendsUIBeta_Response) ne(b CFriendMessages_IsInFriendsUIBeta_Response) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_IsInFriendsUIBeta_Response) eq(b []CFriendMessages_IsInFriendsUIBeta_Response) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_IsInFriendsUIBeta_Response) ne(b []CFriendMessages_IsInFriendsUIBeta_Response) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_isinfriendsuibeta_response() CFriendMessages_IsInFriendsUIBeta_Response {
	return CFriendMessages_IsInFriendsUIBeta_Response{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_isinfriendsuibeta_response(o CFriendMessages_IsInFriendsUIBeta_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_isinfriendsuibeta_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_IsInFriendsUIBeta_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_isinfriendsuibeta_response_unpack(v) ?
	return i, unpacked
}

pub struct CFriendMessages_IncomingMessage_Notification {
mut:
	unknown_fields           []vproto.UnknownField
pub mut:
	steamid_friend           u64
	chat_entry_type          int
	from_limited_account     bool
	message                  string
	rtime32_server_timestamp u32
	ordinal                  u32
	local_echo               bool
	message_no_bbcode        string
	low_priority             bool
}

pub fn (o &CFriendMessages_IncomingMessage_Notification) pack() []byte {
	mut res := []byte{}
	if o.steamid_friend != u64(0) {
		res << vproto.pack_64bit_field(o.steamid_friend, 1)
	}
	if o.chat_entry_type != int(0) {
		res << vproto.pack_int32_field(o.chat_entry_type, 2)
	}
	if o.from_limited_account != false {
		res << vproto.pack_bool_field(o.from_limited_account, 3)
	}
	if o.message != '' {
		res << vproto.pack_string_field(o.message, 4)
	}
	if o.rtime32_server_timestamp != u32(0) {
		res << vproto.pack_32bit_field(o.rtime32_server_timestamp, 5)
	}
	if o.ordinal != u32(0) {
		res << vproto.pack_uint32_field(o.ordinal, 6)
	}
	if o.local_echo != false {
		res << vproto.pack_bool_field(o.local_echo, 7)
	}
	if o.message_no_bbcode != '' {
		res << vproto.pack_string_field(o.message_no_bbcode, 8)
	}
	if o.low_priority != false {
		res << vproto.pack_bool_field(o.low_priority, 9)
	}
	return res
}

pub fn cfriendmessages_incomingmessage_notification_unpack(buf []byte) ?CFriendMessages_IncomingMessage_Notification {
	mut res := zzz_vproto_internal_new_cfriendmessages_incomingmessage_notification()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				i, res.steamid_friend = vproto.unpack_64bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			2 {
				i, res.chat_entry_type = vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			3 {
				i, res.from_limited_account = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			4 {
				i, res.message = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			5 {
				i, res.rtime32_server_timestamp = vproto.unpack_32bit_field(cur_buf, tag_wiretype.wire_type) ?
			}
			6 {
				i, res.ordinal = vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
			}
			7 {
				i, res.local_echo = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			8 {
				i, res.message_no_bbcode = vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
			}
			9 {
				i, res.low_priority = vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type) ?
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CFriendMessages_IncomingMessage_Notification) eq(b CFriendMessages_IncomingMessage_Notification) bool {
	return true && a.steamid_friend == b.steamid_friend && a.chat_entry_type == b.chat_entry_type &&
		a.from_limited_account == b.from_limited_account && a.message == b.message && a.rtime32_server_timestamp ==
		b.rtime32_server_timestamp && a.ordinal == b.ordinal && a.local_echo == b.local_echo &&
		a.message_no_bbcode == b.message_no_bbcode && a.low_priority == b.low_priority
}

[inline]
pub fn (a CFriendMessages_IncomingMessage_Notification) ne(b CFriendMessages_IncomingMessage_Notification) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CFriendMessages_IncomingMessage_Notification) eq(b []CFriendMessages_IncomingMessage_Notification) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CFriendMessages_IncomingMessage_Notification) ne(b []CFriendMessages_IncomingMessage_Notification) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_cfriendmessages_incomingmessage_notification() CFriendMessages_IncomingMessage_Notification {
	return CFriendMessages_IncomingMessage_Notification{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_cfriendmessages_incomingmessage_notification(o CFriendMessages_IncomingMessage_Notification, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_cfriendmessages_incomingmessage_notification(buf []byte, tag_wiretype vproto.WireType) ?(int, CFriendMessages_IncomingMessage_Notification) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := cfriendmessages_incomingmessage_notification_unpack(v) ?
	return i, unpacked
}
