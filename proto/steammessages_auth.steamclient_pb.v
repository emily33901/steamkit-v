// Generated by vproto - Do not modify
module proto

import emily33901.vproto

pub struct CCloudGaming_CreateNonce_Request {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	platform       string
	appid          u32
}

pub fn (o &CCloudGaming_CreateNonce_Request) pack() []byte {
	mut res := []byte{}
	if o.platform != '' {
		res << vproto.pack_string_field(o.platform, 1)
	}
	if o.appid != u32(0) {
		res << vproto.pack_uint32_field(o.appid, 2)
	}
	return res
}

pub fn ccloudgaming_createnonce_request_unpack(buf []byte) ?CCloudGaming_CreateNonce_Request {
	mut res := zzz_vproto_internal_new_ccloudgaming_createnonce_request()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
				res.platform = v
				i = ii
			}
			2 {
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
				res.appid = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CCloudGaming_CreateNonce_Request) eq(b CCloudGaming_CreateNonce_Request) bool {
	return true && a.platform == b.platform && a.appid == b.appid
}

[inline]
pub fn (a CCloudGaming_CreateNonce_Request) ne(b CCloudGaming_CreateNonce_Request) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CCloudGaming_CreateNonce_Request) eq(b []CCloudGaming_CreateNonce_Request) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CCloudGaming_CreateNonce_Request) ne(b []CCloudGaming_CreateNonce_Request) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_ccloudgaming_createnonce_request() CCloudGaming_CreateNonce_Request {
	return CCloudGaming_CreateNonce_Request{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_ccloudgaming_createnonce_request(o CCloudGaming_CreateNonce_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_ccloudgaming_createnonce_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CCloudGaming_CreateNonce_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := ccloudgaming_createnonce_request_unpack(v) ?
	return i, unpacked
}

pub struct CCloudGaming_CreateNonce_Response {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	nonce          string
	expiry         u32
}

pub fn (o &CCloudGaming_CreateNonce_Response) pack() []byte {
	mut res := []byte{}
	if o.nonce != '' {
		res << vproto.pack_string_field(o.nonce, 1)
	}
	if o.expiry != u32(0) {
		res << vproto.pack_uint32_field(o.expiry, 2)
	}
	return res
}

pub fn ccloudgaming_createnonce_response_unpack(buf []byte) ?CCloudGaming_CreateNonce_Response {
	mut res := zzz_vproto_internal_new_ccloudgaming_createnonce_response()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
				res.nonce = v
				i = ii
			}
			2 {
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
				res.expiry = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CCloudGaming_CreateNonce_Response) eq(b CCloudGaming_CreateNonce_Response) bool {
	return true && a.nonce == b.nonce && a.expiry == b.expiry
}

[inline]
pub fn (a CCloudGaming_CreateNonce_Response) ne(b CCloudGaming_CreateNonce_Response) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CCloudGaming_CreateNonce_Response) eq(b []CCloudGaming_CreateNonce_Response) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CCloudGaming_CreateNonce_Response) ne(b []CCloudGaming_CreateNonce_Response) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_ccloudgaming_createnonce_response() CCloudGaming_CreateNonce_Response {
	return CCloudGaming_CreateNonce_Response{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_ccloudgaming_createnonce_response(o CCloudGaming_CreateNonce_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_ccloudgaming_createnonce_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CCloudGaming_CreateNonce_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := ccloudgaming_createnonce_response_unpack(v) ?
	return i, unpacked
}

pub struct CCloudGaming_GetTimeRemaining_Request {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	platform       string
	appid_list     []u32
}

pub fn (o &CCloudGaming_GetTimeRemaining_Request) pack() []byte {
	mut res := []byte{}
	if o.platform != '' {
		res << vproto.pack_string_field(o.platform, 1)
	}
	// [packed=false]
	for _, x in o.appid_list {
		res << vproto.pack_uint32_field(x, 2)
	}
	return res
}

pub fn ccloudgaming_gettimeremaining_request_unpack(buf []byte) ?CCloudGaming_GetTimeRemaining_Request {
	mut res := zzz_vproto_internal_new_ccloudgaming_gettimeremaining_request()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type) ?
				res.platform = v
				i = ii
			}
			2 {
				// [packed=false]
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
				res.appid_list << v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CCloudGaming_GetTimeRemaining_Request) eq(b CCloudGaming_GetTimeRemaining_Request) bool {
	return true && a.platform == b.platform && a.appid_list == b.appid_list
}

[inline]
pub fn (a CCloudGaming_GetTimeRemaining_Request) ne(b CCloudGaming_GetTimeRemaining_Request) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CCloudGaming_GetTimeRemaining_Request) eq(b []CCloudGaming_GetTimeRemaining_Request) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CCloudGaming_GetTimeRemaining_Request) ne(b []CCloudGaming_GetTimeRemaining_Request) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_ccloudgaming_gettimeremaining_request() CCloudGaming_GetTimeRemaining_Request {
	return CCloudGaming_GetTimeRemaining_Request{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_ccloudgaming_gettimeremaining_request(o CCloudGaming_GetTimeRemaining_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_ccloudgaming_gettimeremaining_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CCloudGaming_GetTimeRemaining_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := ccloudgaming_gettimeremaining_request_unpack(v) ?
	return i, unpacked
}

pub struct CCloudGaming_TimeRemaining {
mut:
	unknown_fields    []vproto.UnknownField
pub mut:
	appid             u32
	minutes_remaining u32
}

pub fn (o &CCloudGaming_TimeRemaining) pack() []byte {
	mut res := []byte{}
	if o.appid != u32(0) {
		res << vproto.pack_uint32_field(o.appid, 1)
	}
	if o.minutes_remaining != u32(0) {
		res << vproto.pack_uint32_field(o.minutes_remaining, 2)
	}
	return res
}

pub fn ccloudgaming_timeremaining_unpack(buf []byte) ?CCloudGaming_TimeRemaining {
	mut res := zzz_vproto_internal_new_ccloudgaming_timeremaining()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
				res.appid = v
				i = ii
			}
			2 {
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type) ?
				res.minutes_remaining = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CCloudGaming_TimeRemaining) eq(b CCloudGaming_TimeRemaining) bool {
	return true && a.appid == b.appid && a.minutes_remaining == b.minutes_remaining
}

[inline]
pub fn (a CCloudGaming_TimeRemaining) ne(b CCloudGaming_TimeRemaining) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CCloudGaming_TimeRemaining) eq(b []CCloudGaming_TimeRemaining) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CCloudGaming_TimeRemaining) ne(b []CCloudGaming_TimeRemaining) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_ccloudgaming_timeremaining() CCloudGaming_TimeRemaining {
	return CCloudGaming_TimeRemaining{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_ccloudgaming_timeremaining(o CCloudGaming_TimeRemaining, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_ccloudgaming_timeremaining(buf []byte, tag_wiretype vproto.WireType) ?(int, CCloudGaming_TimeRemaining) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := ccloudgaming_timeremaining_unpack(v) ?
	return i, unpacked
}

pub struct CCloudGaming_GetTimeRemaining_Response {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	entries        []CCloudGaming_TimeRemaining
}

pub fn (o &CCloudGaming_GetTimeRemaining_Response) pack() []byte {
	mut res := []byte{}
	// [packed=false]
	for _, x in o.entries {
		res << zzz_vproto_internal_pack_ccloudgaming_timeremaining(x, 2)
	}
	return res
}

pub fn ccloudgaming_gettimeremaining_response_unpack(buf []byte) ?CCloudGaming_GetTimeRemaining_Response {
	mut res := zzz_vproto_internal_new_ccloudgaming_gettimeremaining_response()
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			2 {
				// [packed=false]
				ii, v := zzz_vproto_internal_unpack_ccloudgaming_timeremaining(cur_buf,
					tag_wiretype.wire_type) ?
				res.entries << v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

[inline]
pub fn (a CCloudGaming_GetTimeRemaining_Response) eq(b CCloudGaming_GetTimeRemaining_Response) bool {
	return true && a.entries.eq(b.entries)
}

[inline]
pub fn (a CCloudGaming_GetTimeRemaining_Response) ne(b CCloudGaming_GetTimeRemaining_Response) bool {
	return !a.eq(b)
}

[inline]
pub fn (a []CCloudGaming_GetTimeRemaining_Response) eq(b []CCloudGaming_GetTimeRemaining_Response) bool {
	if a.len != b.len {
		return false
	}
	for i, _ in a {
		if a[i].ne(b[i]) {
			return false
		}
	}
	return true
}

[inline]
pub fn (a []CCloudGaming_GetTimeRemaining_Response) ne(b []CCloudGaming_GetTimeRemaining_Response) bool {
	return !a.eq(b)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_new_ccloudgaming_gettimeremaining_response() CCloudGaming_GetTimeRemaining_Response {
	return CCloudGaming_GetTimeRemaining_Response{}
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_pack_ccloudgaming_gettimeremaining_response(o CCloudGaming_GetTimeRemaining_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
[inline]
pub fn zzz_vproto_internal_unpack_ccloudgaming_gettimeremaining_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CCloudGaming_GetTimeRemaining_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype) ?
	mut unpacked := ccloudgaming_gettimeremaining_response_unpack(v) ?
	return i, unpacked
}
